directive @hide on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

type City {
  id: ID!
  name: String
  descriptionTitle: String
  descriptionDetail: String
  descriptionAlt: String
  thumbnail: Photo @cypher(
    statement:"""
    MATCH (this)<--(a:Attraction)<--(r:Review) where duration.inMonths(r.createdDate, date()).months < 6
    WITH a, count(r) AS reviews ORDER BY reviews  DESC LIMIT 1
    MATCH (a)-[:HAS_THUMBNAIL]->(photo:Photo)
    RETURN photo
    """
    )
}

type Attraction {
  id: ID!
  name: String
  location: Point
  address: String
  thumbnail: Photo @relation(name: "HAS_THUMBNAIL", direction: "OUT")
  city: City @relation(name: "IN_CITY", direction: "OUT")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
  types: [Type] @relation(name: "IN_TYPE", direction: "OUT")
  tags: [Tag] @relation(name: "HAS_TAG", direction: "OUT")
  reviews: [Review] @relation(name:"REVIEWS", direction:"IN")
  avgRating: Float @cypher(statement:"""
    MATCH(this)<--(r:Review)
    return avg(r.rating)
  """)
  ratingCount: [RatingCount] @cypher(statement:"""
    MATCH(this)<--(r:Review)
    WITH r.rating as rating, count(*) AS count
    RETURn {rating:rating, count:count}
  """)

  similars(first: Int = 10): [Attraction] @cypher(
    statement:"""
    MATCH (this)-[:IN_CATEGORY|:IN_TYPE|:HAS_TAG]->(t)
    WITH this as a1, collect(id(t)) as a1Traits
    MATCH (a2: Attraction)-[:IN_CATEGORY|:IN_TYPE|:HAS_TAG]->(t) where a2<>a1
    WITH a1, a1Traits, a2, collect(id(t)) as a2Traits
    WITH a1, a1Traits, a2, a2Traits, gds.alpha.similarity.jaccard(a1Traits, a2Traits) as score
    RETURN a2
    ORDER BY score DESC LIMIT toInteger($first)
    """
    )
} 

type Photo {
  width: Int
  height: Int 
  url: String!
}

type Category {
  id: ID!
  name: String
}

type Type {
  id: ID!
  name: String
}

type Tag {
  id: ID!
  name: String
}

type Review {
  id: ID!
  createdDate: Date
  publishedDate: Date
  title: String
  text: String
  rating: Int!
  tripDate: Date
  tripType: String
  attraction: Attraction @relation(name:"REVIEWS", direction: "OUT") 
  owner: User! @relation(name: "WROTE", direction: "IN")
  photos: [Photo] @relation(name: "HAS_PHOTO", direction: "OUT")
}

type User {
  id: ID!
  email: String
  password: String @hide
  username: String!
  displayName: String
  avatar: Photo
  hometown: City @relation(name:"LIVE_IN", direction: "OUT")
  role: Role
}

type LoginUser {
  token: String
}

enum Role {
  ADMIN
  USER
}  

type RatingCount {
  rating: Int!
  count: Int!
}

type Query {
  RecommendedAttractions(userId: ID!): [Attraction]! @cypher(statement:"""
    MATCH (u1:User{id: $userId})-[:WROTE]->(r1:Review)-[:REVIEWS]->(a1:Attraction)
    WITH u1, a1, avg(r1.rating) AS rating
    WITH u1, gds.alpha.similarity.asVector(a1, rating) AS u1Vector

    MATCH (u2:User)-[:WROTE]->(r2:Review)-[:REVIEWS]->(a2:Attraction) WHERE u2<>u1
    WITH u1, u1Vector, u2, a2, avg(r2.rating) AS rating
    WITH u1, u1Vector, u2, gds.alpha.similarity.asVector(a2, rating) AS u2Vector
    WHERE size(apoc.coll.intersection([x in u1Vector | x.category], [y in u2Vector | y.category])) > 5
    WITH u1, u2,  gds.alpha.similarity.pearson(u1Vector, u2Vector, {vectorType:"maps"}) AS similarity
    ORDER BY similarity DESC limit 10

    MATCH (u2)-[:WROTE]->(r:Review)-[:REVIEWS]->(a:Attraction) WHERE NOT EXISTS((u1)-[:WROTE]->(:Review)-[:REVIEWS]->(a))
    RETURN a.name, similarity, r.rating AS rating, sum(similarity*r.rating) AS score ORDER BY score DESC LIMIT 10
  """)

  HotAttractions(first: Int = 10): [Attraction]! @cypher(statement:"""
    MATCH (a:Attraction)<--(r:Review) where duration.inMonths(r.createdDate, date()).months < 6
    with a, count(r) AS reviews 
    return a ORDER BY reviews DESC LIMIT toInteger($first)
  """)
}

type Mutation {
  LoginUser(email: String!, password: String!): LoginUser

  # CreateUser (
  #   email: String!
  #   password: String!
  #   username: String!
  #   displayName: String
  #   role: Role
  # ): User @cypher(statement: """
  #       MERGE (u:User {email: $email})
  #       SET
  #         u.id = apoc.create.uuid(), 
  #         u.username = $username, 
  #         u.password = $password, 
  #         u.email = $email, 
  #         u.displayName = $displayName,
  #         u.role = $role
  #       RETURN u
  #     """
  #   )
}