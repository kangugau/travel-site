directive @hide on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION
union SearchResult = Attraction | City
type City {
  id: ID!
  name: String
  descriptionTitle: String
  descriptionDetail: String
  descriptionAlt: String
  thumbnail: Photo @relation(name: "HAS_THUMBNAIL", direction: OUT)
  # @cypher(
  #   statement:"""
  #   MATCH (this)<--(a:Attraction)<--(r:Review) where duration.inMonths(r.createdDate, date()).months < 6
  #   WITH a, count(r) AS reviews ORDER BY reviews  DESC LIMIT 1
  #   MATCH (a)-[:HAS_THUMBNAIL]->(photo:Photo)
  #   RETURN photo
  #   """
  #   )
}

type Attraction {
  id: ID!
  name: String
  location: Point
  address: String
  thumbnail: Photo @relation(name: "HAS_THUMBNAIL", direction: OUT)
  city: City @relation(name: "IN_CITY", direction: OUT)
  categories: [Category] @relation(name: "IN_CATEGORY", direction: OUT)
  types: [Type] @relation(name: "IN_TYPE", direction: OUT)
  tags: [Tag] @relation(name: "HAS_TAG", direction: OUT)
  reviews: [Review] @relation(name:"REVIEWS", direction:IN)
  totalRating: Int @cypher(statement:"""
    MATCH(this)<--(r:Review)
    RETURN count(r)
  """)
  avgRating: Float @cypher(statement:"""
    MATCH(this)<--(r:Review)
    RETURN coalesce(avg(r.rating),0)
  """)
  ratingCount: [RatingCount] @cypher(statement:"""
    MATCH(this)<--(r:Review)
    WITH r.rating as rating, count(*) AS count
    RETURN {rating:rating, count:count}
  """)

  similars(first: Int = 10): [Attraction] @cypher(
    statement:"""
    MATCH (this)-[:IN_CATEGORY|:IN_TYPE|:HAS_TAG]->(t)
    WITH this as a1, collect(id(t)) as a1Traits
    MATCH (a2: Attraction)-[:IN_CATEGORY|:IN_TYPE|:HAS_TAG]->(t) where a2<>a1
    WITH a1, a1Traits, a2, collect(id(t)) as a2Traits
    WITH a1, a1Traits, a2, a2Traits, gds.alpha.similarity.jaccard(a1Traits, a2Traits) as score
    RETURN a2
    ORDER BY score DESC LIMIT toInteger($first)
    """
    )

  similarsNearBy(first: Int = 10): [Attraction] @cypher(
    statement:"""
    MATCH (this)-[:IN_CATEGORY|:IN_TYPE|:HAS_TAG]->(t)
    WITH this as a1, collect(id(t)) as a1Traits
    MATCH (a1)-[:IN_CITY]->(:City)<-[:IN_CITY]-(a2: Attraction)-[:IN_CATEGORY|:IN_TYPE|:HAS_TAG]->(t) where a2<>a1
    WITH a1, a1Traits, a2, collect(id(t)) as a2Traits
    WITH a1, a1Traits, a2, a2Traits, gds.alpha.similarity.jaccard(a1Traits, a2Traits) as score
    RETURN a2
    ORDER BY score DESC LIMIT toInteger($first)
    """
    )
} 

type Photo {
  width: Int
  height: Int 
  url: String!
}

type Category {
  id: ID!
  name: String
}

type Type {
  id: ID!
  name: String
}

type Tag {
  id: ID!
  name: String
}

type Review {
  id: ID!
  createdDate: Date!
  publishedDate: Date!
  title: String!
  text: String!
  rating: Int!
  tripDate: Date
  tripType: String
  attraction: Attraction @relation(name:"REVIEWS", direction: OUT) 
  owner: User! @relation(name: "WROTE", direction: IN)
  photos: [Photo] @relation(name: "HAS_PHOTO", direction: OUT)
}

type User {
  id: ID!
  email: String
  password: String @hide
  username: String
  displayName: String
  avatar: Photo @relation(name: "HAS_AVATAR", direction: OUT)
  hometown: City @relation(name:"LIVE_IN", direction: OUT)
  role: Role
  reviews: [Review] @relation(name: "WROTE", direction: OUT)
  recentViews(first: Int = 10, offset: Int = 0): [Attraction] @cypher(statement:"""
    MATCH (this)-[r:VIEWED]->(a:Attraction) 
    RETURN a 
    ORDER BY r.lastViewedDate DESC SKIP toInteger($offset) LIMIT toInteger($first)
  """)
  savedAttractions: [Attraction] @relation(name: "SAVED", direction: OUT)
  resultsCount: Int
}

type LoginUser {
  token: String
}

enum Role {
  ADMIN
  USER
}  

type RatingCount {
  rating: Int!
  count: Int!
}

type NearByAttraction {
  attraction: Attraction
  distance: Float
}

type Query {
  RecommendedAttractions(userId: ID!): [Attraction]! @cypher(statement:"""
    MATCH (u1:User{id: $userId})-[:WROTE]->(r1:Review)-[:REVIEWS]->(a1:Attraction)
    WITH u1, a1, avg(r1.rating) AS rating
    WITH u1, gds.alpha.similarity.asVector(a1, rating) AS u1Vector

    MATCH (u2:User)-[:WROTE]->(r2:Review)-[:REVIEWS]->(a2:Attraction) WHERE u2<>u1
    WITH u1, u1Vector, u2, a2, avg(r2.rating) AS rating
    WITH u1, u1Vector, u2, gds.alpha.similarity.asVector(a2, rating) AS u2Vector
    WITH u1, u2,  gds.alpha.similarity.pearson(u1Vector, u2Vector, {vectorType:"maps"}) AS similarity
    ORDER BY similarity DESC limit 10

    MATCH (u2)-[:WROTE]->(r:Review)-[:REVIEWS]->(a:Attraction) WHERE NOT EXISTS((u1)-[:WROTE]->(:Review)-[:REVIEWS]->(a))
    WITH a, sum(similarity*r.rating) AS score
    RETURN a ORDER BY score DESC LIMIT 10
  """)

  HotAttractions(first: Int = 10): [Attraction]! @cypher(statement:"""
    MATCH (a:Attraction)<--(r:Review) where duration.inMonths(r.createdDate, date()).months < 7
    with a, count(r) AS reviews 
    return a ORDER BY reviews DESC LIMIT toInteger($first)
  """)

  fullTextSearch(keyword: String): [SearchResult]! @cypher(statement:"""
    CALL db.index.fulltext.queryNodes("name", $keyword) YIELD node, score
    RETURN node ORDER BY score DESC
  """)

  AttractionsNearBy(attractionId: ID!, first: Int = 10): [NearByAttraction]

  UserCount: User
}

type Mutation {
  LoginUser(email: String!, password: String!): LoginUser
  CreateReview(
    attractionId: ID!
    title: String!
    text: String!
    rating: Int!
  ): Review @cypher(statement:"""
    MATCH (u:User{id:$cypherParams.currentUser.id}),
      (a:Attraction{id:$attractionId})
    WITH u, a
    CREATE (r:Review)
    SET 
      r.id = apoc.create.uuid(),
      r.title = $title,
      r.text = $text,
      r.rating = $rating,
      r.createdDate = date(),
      r.publishedDate = date()
    WITH u, a, r
    CREATE (u)-[:WROTE]->(r)-[:REVIEWS]->(a)
    RETURN r
  """)

  LogViewedAttraction(
    userId: ID!,
    attractionId:ID!, 
    lastViewedDate: _Neo4jDateTimeInput!
  ): Attraction @cypher(statement:"""
    MATCH(u:User{id:$userId}), (a:Attraction{id:$attractionId})
    MERGE (u)-[r:VIEWED]->(a) SET r.lastViewedDate = datetime($lastViewedDate.formatted)
    RETURN a
  """)
}